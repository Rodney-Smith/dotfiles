#!/usr/local/bin/bash
export BASH_CONF="bash_prompt"

# Example:
# nicolas@host: ~/.dotfiles on master [+!?$]
# username at host in working directory $

# Heavily inspired by @necolas’s prompt: https://github.com/necolas/dotfiles
# Shell prompt based on the Solarized Dark theme.
# Screenshot: http://i.imgur.com/DSJ1G.png
# iTerm2 prefs: import Solarized theme (disable bright colors for bold text)
# Color ref: http://vim.wikia.com/wiki/Xterm256_color_names_for_console_Vim
# More tips: http://www.cyberciti.biz/tips/howto-linux-unix-bash-shell-setup-prompt.html

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
	export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
	export TERM='xterm-256color';
fi;

prompt_git() {
	local s='';
	local branchName='';

	# Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then
		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then
			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null;
			# Check for uncommitted changes in the index.
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+='+';
			fi;
			# Check for unstaged changes.
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s+='!';
			fi;
			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
			fi;
			# Check for stashed files.
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+='$';
			fi;
		fi;

		# Get the short symbolic ref.
		# If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

		[ -n "${s}" ] && s=" [${s}]";

		echo -e "${1}${branchName}${2}${s}";
	else
		return;
	fi;
}

if tput setaf 1 &> /dev/null; then
    tput sgr0 # reset colors
    bold=$(tput bold);
    reset=$(tput sgr0);
    # Solarized colors
    # (https://github.com/altercation/solarized/tree/master/iterm2-colors-solarized#the-values)
    black=$(tput setaf 0);
    blue=$(tput setaf 33);
    cyan=$(tput setaf 37);
    green=$(tput setaf 64);
    orange=$(tput setaf 166);
    purple=$(tput setaf 125);
    red=$(tput setaf 124);
    white=$(tput setaf 15);
    yellow=$(tput setaf 136);
else
    bold='';
    reset="\e[0m";
    black="\e[1;30m";
		red="\e[1;31m";
    green="\e[1;32m";
    orange="\e[1;33m";
		yellow="\e[1;33m";
		blue="\e[1;34m";
    purple="\e[1;35m";
		cyan="\e[1;36m";
    white="\e[1;37m";
fi;

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
	userStyle="${red}";
else
	userStyle="${orange}";
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
	hostStyle="${bold}${red}";
else
	hostStyle="${yellow}";
fi;

# Set the terminal title to the current working directory.
#PS1='\[033]0;\w\007\]';
#PS1+='\[${bold}\]\n'; # newline
#PS1+='\[${userStyle}\]\u'; # username
#PS1+='\[${white}\] at ';
#PS1+='\[${hostStyle}\]\h'; # host
#PS1+='\[${white}\] in ';
#PS1+='\[${green}\]\W'; # working directory
#PS1+='\$(prompt_git \"\[${white}\] on \[${blue}\]\" \"\[${blue}\]\")'; # Git repository details
#PS1+='\n';
#PS1+='\[${white}\]\$ \[${reset}\]'; # `$` (and reset color)
#PS1="$(scutil --get ComputerName):\W \u\\$ "
PS1="\u@\h [\W]$ "
export PS1;

PS2="\[${yellow}\]→ \[${reset}\]";
export PS2;

case "$-" in
*i*)	echo This shell is interactive ;;
*)	echo This shell is not interactive ;;
esac
